#----------------------------------------#
#function to determine and declare winner

def game_stat():

	def declare_win(x,y):
    		if game[x][y] == 1:
        		return "Player 1 wins!"
    		elif game[x][y] == 2:
        		return "Player 2 wins!"
        
	def winner():
    		for i in range(0,3): # checks if each entry matches and is not 0.
        		if game[i][0] == game[i][1] == game[i][2]:   # check rows
            			if game[i][0] != 0:
                			return(declare_win(i,0))
        		elif game[0][i] == game[1][i] == game[2][i]: # check columns
            			if game[0][i] != 0:
                			return(declare_win(0,i))
        		elif game[0][0] == game[1][1] == game[2][2]: # check diagonal L2R
            			if game[0][0] != 0:
                			return(declare_win(0,0))
        		elif game[0][2]== game[1][1] == game[2][0]:  # check diagonal R2L
            			if game[0][2] != 0:
                			return(declare_win(0,2))
    		else:
        		return("No winner!")
        
	print(winner())

# function to validate input (inop)
'''
def val_input(prompt):
	while True:
		try:
			game = int(input(prompt))
		except ValueError:
			print("Invalid Selection.")
			continue
'''			

#function to print board

def print_board():
    def print_horiz_line():
        print("--- " * 3)

    def print_vert_line():
        print("   |" * (2))

    for index in range(2):
        print_vert_line()
        print_horiz_line()
    
    print_vert_line()

# function to print game board (inop)

'''

def cur_board():
	for i in range(0,3):
		for j in range(0,3):			
			if game[i][j] == 1:
				print(" X ")
			elif game[i][j] == 2:
				print(" O ")
			else:
				print(" ")
		print("--- " * 3)
				

'''

# function to update board
	
def add_piece(board,row,col,player):
    if board[row][col] == 0:
        board[row][col] = player
        return board
    else:
        return False

#------------------------------------------#
# main game

		
game = [[0,1,0],[0,1,0],[0,0,0]]		
player = 2
turns = 8
newboard = False

while turns < 9:
	if player == 2:
		turns = turns + 1
		player = 1
		print_board()
		print() # line intentional left blank
		while bool(newboard) == False: # until the players move is determined valid, this will remain false.
			print("Using the board above as a guide, select the grid for your next move.")
			move = input(f'Player {player}, enter the row(1-3) and col(1-3) [ex: 2,3]: ').split(",")
			newboard = add_piece(game,int(move[0])-1, int(move[1])-1,player)
			# the identified player provides the row and column separated by a comma, and sent to the add_piece function using the split method along with the array and player #
			# we have to reduce their value by one in order to use the correct index [starts at zero]
			print() # line intentional left blank
			if bool(newboard) == True: # once a valid moves is processed, the game continues.
				print_board()
				if turns >= 5:
					game_stat()
			else:
				print("Invalid move. Please try again!")
				print()		
	else:
		turns = turns + 1
		player = 2
		print_board()
		print() # line intentional left blank
		while bool(newboard) == False:
			print("Using the board above as a guide, select the grid for your next move.")
			move = input(f'Player {player}, enter the row(1-3) and col(1-3) [ex: 2,3]: ').split(",")
			newboard = add_piece(game,int(move[0])-1, int(move[1])-1,player)
			print() # line intentional left blank
			if bool(newboard) == True:
				print_board()
				if turns >= 5:
					game_stat()
			else:
				print("Invalid move. Please try again!")
				print()			
